const db = require("./DataBase/db");

async function testReservation() {
  console.log("üß™ Test de cr√©ation de r√©servation...");

  // Donn√©es de test
  const testData = {
    nom: "Test",
    prenom: "User",
    email: "test@example.com",
    telephone: "0123456789",
    dateReservation: "2025-07-20",
    heureDebut: "14:00",
    heureFin: "16:00",
    typeReservation: "Reunion",
    nombrePersonnes: 10,
    description: "Test de r√©servation",
    besoinsSpecifiques: "Aucun",
  };

  try {
    console.log("üìã Donn√©es de test:", testData);

    // Test de la v√©rification des conflits
    console.log("\nüîç V√©rification des conflits...");
    const conflitQuery = `
      SELECT * FROM reservations_salle 
      WHERE dateReservation = ? 
      AND statut NOT IN ('annulee', 'passee')
      AND NOT (heureFin <= ? OR heureDebut >= ?)
    `;

    const conflits = await db.query(conflitQuery, [
      testData.dateReservation,
      testData.heureDebut,
      testData.heureFin,
    ]);

    // Les r√©sultats sont dans le premier √©l√©ment du tableau retourn√©
    const conflitsData = conflits[0];
    console.log(
      "üìä R√©sultat de la v√©rification:",
      conflitsData ? conflitsData.length : 0,
      "conflits trouv√©s"
    );

    if (conflitsData && conflitsData.length > 0) {
      console.log("‚ùå Conflits d√©tect√©s:", conflitsData);
    } else {
      console.log("‚úÖ Aucun conflit d√©tect√©");

      // Test de cr√©ation
      console.log("\nüíæ Test de cr√©ation...");
      const insertQuery = `
        INSERT INTO reservations_salle (
          nom, prenom, email, telephone, dateReservation, 
          heureDebut, heureFin, typeReservation, nombrePersonnes, 
          description, besoinsSpecifiques, statut
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;

      const result = await db.query(insertQuery, [
        testData.nom,
        testData.prenom,
        testData.email,
        testData.telephone,
        testData.dateReservation,
        testData.heureDebut,
        testData.heureFin,
        testData.typeReservation,
        testData.nombrePersonnes,
        testData.description,
        testData.besoinsSpecifiques,
        "en_attente",
      ]);

      console.log("üîç R√©sultat complet de l'insertion:", result);

      // Pour MySQL2, l'insertId est dans le premier √©l√©ment
      const insertResult = result[0];
      const insertId = insertResult.insertId;

      console.log("‚úÖ R√©servation cr√©√©e avec succ√®s! ID:", insertId);

      // V√©rifier que la r√©servation a √©t√© cr√©√©e
      const verifyQuery = "SELECT * FROM reservations_salle WHERE id = ?";
      const verifyResult = await db.query(verifyQuery, [insertId]);
      const created = verifyResult[0]; // Les donn√©es sont dans le premier √©l√©ment
      console.log("üìã R√©servation cr√©√©e:", created[0]);
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }

  process.exit(0);
}

testReservation();
